/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ndpmedia.rocketmq.babel;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-12")
public class MessageExt implements org.apache.thrift.TBase<MessageExt, MessageExt._Fields>, java.io.Serializable, Cloneable, Comparable<MessageExt> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageExt");

  private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField QUEUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queueId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STORE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("storeSize", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField QUEUE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("queueOffset", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SYS_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("sysFlag", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BORN_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("bornTimestamp", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField BORN_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("bornHost", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STORE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("storeTimestamp", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField STORE_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("storeHost", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField COMMIT_LOG_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("commitLogOffset", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField BODY_CRC_FIELD_DESC = new org.apache.thrift.protocol.TField("bodyCRC", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField RECONSUME_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("reconsumeTimes", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageExtStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageExtTupleSchemeFactory());
  }

  public String topic; // required
  public int flag; // required
  public Map<String,String> properties; // required
  public ByteBuffer data; // required
  public int queueId; // required
  public int storeSize; // required
  public long queueOffset; // required
  public int sysFlag; // required
  public long bornTimestamp; // required
  public String bornHost; // required
  public long storeTimestamp; // required
  public String storeHost; // required
  public String msgId; // required
  public long commitLogOffset; // required
  public long bodyCRC; // required
  public int reconsumeTimes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOPIC((short)1, "topic"),
    FLAG((short)2, "flag"),
    PROPERTIES((short)3, "properties"),
    DATA((short)4, "data"),
    QUEUE_ID((short)5, "queueId"),
    STORE_SIZE((short)6, "storeSize"),
    QUEUE_OFFSET((short)7, "queueOffset"),
    SYS_FLAG((short)8, "sysFlag"),
    BORN_TIMESTAMP((short)9, "bornTimestamp"),
    BORN_HOST((short)10, "bornHost"),
    STORE_TIMESTAMP((short)11, "storeTimestamp"),
    STORE_HOST((short)12, "storeHost"),
    MSG_ID((short)13, "msgId"),
    COMMIT_LOG_OFFSET((short)14, "commitLogOffset"),
    BODY_CRC((short)15, "bodyCRC"),
    RECONSUME_TIMES((short)16, "reconsumeTimes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOPIC
          return TOPIC;
        case 2: // FLAG
          return FLAG;
        case 3: // PROPERTIES
          return PROPERTIES;
        case 4: // DATA
          return DATA;
        case 5: // QUEUE_ID
          return QUEUE_ID;
        case 6: // STORE_SIZE
          return STORE_SIZE;
        case 7: // QUEUE_OFFSET
          return QUEUE_OFFSET;
        case 8: // SYS_FLAG
          return SYS_FLAG;
        case 9: // BORN_TIMESTAMP
          return BORN_TIMESTAMP;
        case 10: // BORN_HOST
          return BORN_HOST;
        case 11: // STORE_TIMESTAMP
          return STORE_TIMESTAMP;
        case 12: // STORE_HOST
          return STORE_HOST;
        case 13: // MSG_ID
          return MSG_ID;
        case 14: // COMMIT_LOG_OFFSET
          return COMMIT_LOG_OFFSET;
        case 15: // BODY_CRC
          return BODY_CRC;
        case 16: // RECONSUME_TIMES
          return RECONSUME_TIMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FLAG_ISSET_ID = 0;
  private static final int __QUEUEID_ISSET_ID = 1;
  private static final int __STORESIZE_ISSET_ID = 2;
  private static final int __QUEUEOFFSET_ISSET_ID = 3;
  private static final int __SYSFLAG_ISSET_ID = 4;
  private static final int __BORNTIMESTAMP_ISSET_ID = 5;
  private static final int __STORETIMESTAMP_ISSET_ID = 6;
  private static final int __COMMITLOGOFFSET_ISSET_ID = 7;
  private static final int __BODYCRC_ISSET_ID = 8;
  private static final int __RECONSUMETIMES_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.QUEUE_ID, new org.apache.thrift.meta_data.FieldMetaData("queueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STORE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("storeSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUEUE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("queueOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SYS_FLAG, new org.apache.thrift.meta_data.FieldMetaData("sysFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BORN_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("bornTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BORN_HOST, new org.apache.thrift.meta_data.FieldMetaData("bornHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STORE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("storeTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STORE_HOST, new org.apache.thrift.meta_data.FieldMetaData("storeHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("msgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMIT_LOG_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("commitLogOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BODY_CRC, new org.apache.thrift.meta_data.FieldMetaData("bodyCRC", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECONSUME_TIMES, new org.apache.thrift.meta_data.FieldMetaData("reconsumeTimes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageExt.class, metaDataMap);
  }

  public MessageExt() {
    this.flag = 0;

  }

  public MessageExt(
    String topic,
    int flag,
    Map<String,String> properties,
    ByteBuffer data,
    int queueId,
    int storeSize,
    long queueOffset,
    int sysFlag,
    long bornTimestamp,
    String bornHost,
    long storeTimestamp,
    String storeHost,
    String msgId,
    long commitLogOffset,
    long bodyCRC,
    int reconsumeTimes)
  {
    this();
    this.topic = topic;
    this.flag = flag;
    setFlagIsSet(true);
    this.properties = properties;
    this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
    this.queueId = queueId;
    setQueueIdIsSet(true);
    this.storeSize = storeSize;
    setStoreSizeIsSet(true);
    this.queueOffset = queueOffset;
    setQueueOffsetIsSet(true);
    this.sysFlag = sysFlag;
    setSysFlagIsSet(true);
    this.bornTimestamp = bornTimestamp;
    setBornTimestampIsSet(true);
    this.bornHost = bornHost;
    this.storeTimestamp = storeTimestamp;
    setStoreTimestampIsSet(true);
    this.storeHost = storeHost;
    this.msgId = msgId;
    this.commitLogOffset = commitLogOffset;
    setCommitLogOffsetIsSet(true);
    this.bodyCRC = bodyCRC;
    setBodyCRCIsSet(true);
    this.reconsumeTimes = reconsumeTimes;
    setReconsumeTimesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageExt(MessageExt other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTopic()) {
      this.topic = other.topic;
    }
    this.flag = other.flag;
    if (other.isSetProperties()) {
      Map<String,String> __this__properties = new HashMap<String,String>(other.properties);
      this.properties = __this__properties;
    }
    if (other.isSetData()) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
    }
    this.queueId = other.queueId;
    this.storeSize = other.storeSize;
    this.queueOffset = other.queueOffset;
    this.sysFlag = other.sysFlag;
    this.bornTimestamp = other.bornTimestamp;
    if (other.isSetBornHost()) {
      this.bornHost = other.bornHost;
    }
    this.storeTimestamp = other.storeTimestamp;
    if (other.isSetStoreHost()) {
      this.storeHost = other.storeHost;
    }
    if (other.isSetMsgId()) {
      this.msgId = other.msgId;
    }
    this.commitLogOffset = other.commitLogOffset;
    this.bodyCRC = other.bodyCRC;
    this.reconsumeTimes = other.reconsumeTimes;
  }

  public MessageExt deepCopy() {
    return new MessageExt(this);
  }

  @Override
  public void clear() {
    this.topic = null;
    this.flag = 0;

    this.properties = null;
    this.data = null;
    setQueueIdIsSet(false);
    this.queueId = 0;
    setStoreSizeIsSet(false);
    this.storeSize = 0;
    setQueueOffsetIsSet(false);
    this.queueOffset = 0;
    setSysFlagIsSet(false);
    this.sysFlag = 0;
    setBornTimestampIsSet(false);
    this.bornTimestamp = 0;
    this.bornHost = null;
    setStoreTimestampIsSet(false);
    this.storeTimestamp = 0;
    this.storeHost = null;
    this.msgId = null;
    setCommitLogOffsetIsSet(false);
    this.commitLogOffset = 0;
    setBodyCRCIsSet(false);
    this.bodyCRC = 0;
    setReconsumeTimesIsSet(false);
    this.reconsumeTimes = 0;
  }

  public String getTopic() {
    return this.topic;
  }

  public MessageExt setTopic(String topic) {
    this.topic = topic;
    return this;
  }

  public void unsetTopic() {
    this.topic = null;
  }

  /** Returns true if field topic is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic() {
    return this.topic != null;
  }

  public void setTopicIsSet(boolean value) {
    if (!value) {
      this.topic = null;
    }
  }

  public int getFlag() {
    return this.flag;
  }

  public MessageExt setFlag(int flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, String val) {
    if (this.properties == null) {
      this.properties = new HashMap<String,String>();
    }
    this.properties.put(key, val);
  }

  public Map<String,String> getProperties() {
    return this.properties;
  }

  public MessageExt setProperties(Map<String,String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public byte[] getData() {
    setData(org.apache.thrift.TBaseHelper.rightSize(data));
    return data == null ? null : data.array();
  }

  public ByteBuffer bufferForData() {
    return org.apache.thrift.TBaseHelper.copyBinary(data);
  }

  public MessageExt setData(byte[] data) {
    this.data = data == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(data, data.length));
    return this;
  }

  public MessageExt setData(ByteBuffer data) {
    this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public int getQueueId() {
    return this.queueId;
  }

  public MessageExt setQueueId(int queueId) {
    this.queueId = queueId;
    setQueueIdIsSet(true);
    return this;
  }

  public void unsetQueueId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUEUEID_ISSET_ID);
  }

  /** Returns true if field queueId is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueId() {
    return EncodingUtils.testBit(__isset_bitfield, __QUEUEID_ISSET_ID);
  }

  public void setQueueIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUEUEID_ISSET_ID, value);
  }

  public int getStoreSize() {
    return this.storeSize;
  }

  public MessageExt setStoreSize(int storeSize) {
    this.storeSize = storeSize;
    setStoreSizeIsSet(true);
    return this;
  }

  public void unsetStoreSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STORESIZE_ISSET_ID);
  }

  /** Returns true if field storeSize is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreSize() {
    return EncodingUtils.testBit(__isset_bitfield, __STORESIZE_ISSET_ID);
  }

  public void setStoreSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STORESIZE_ISSET_ID, value);
  }

  public long getQueueOffset() {
    return this.queueOffset;
  }

  public MessageExt setQueueOffset(long queueOffset) {
    this.queueOffset = queueOffset;
    setQueueOffsetIsSet(true);
    return this;
  }

  public void unsetQueueOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUEUEOFFSET_ISSET_ID);
  }

  /** Returns true if field queueOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __QUEUEOFFSET_ISSET_ID);
  }

  public void setQueueOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUEUEOFFSET_ISSET_ID, value);
  }

  public int getSysFlag() {
    return this.sysFlag;
  }

  public MessageExt setSysFlag(int sysFlag) {
    this.sysFlag = sysFlag;
    setSysFlagIsSet(true);
    return this;
  }

  public void unsetSysFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYSFLAG_ISSET_ID);
  }

  /** Returns true if field sysFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetSysFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __SYSFLAG_ISSET_ID);
  }

  public void setSysFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYSFLAG_ISSET_ID, value);
  }

  public long getBornTimestamp() {
    return this.bornTimestamp;
  }

  public MessageExt setBornTimestamp(long bornTimestamp) {
    this.bornTimestamp = bornTimestamp;
    setBornTimestampIsSet(true);
    return this;
  }

  public void unsetBornTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BORNTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field bornTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetBornTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __BORNTIMESTAMP_ISSET_ID);
  }

  public void setBornTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BORNTIMESTAMP_ISSET_ID, value);
  }

  public String getBornHost() {
    return this.bornHost;
  }

  public MessageExt setBornHost(String bornHost) {
    this.bornHost = bornHost;
    return this;
  }

  public void unsetBornHost() {
    this.bornHost = null;
  }

  /** Returns true if field bornHost is set (has been assigned a value) and false otherwise */
  public boolean isSetBornHost() {
    return this.bornHost != null;
  }

  public void setBornHostIsSet(boolean value) {
    if (!value) {
      this.bornHost = null;
    }
  }

  public long getStoreTimestamp() {
    return this.storeTimestamp;
  }

  public MessageExt setStoreTimestamp(long storeTimestamp) {
    this.storeTimestamp = storeTimestamp;
    setStoreTimestampIsSet(true);
    return this;
  }

  public void unsetStoreTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STORETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field storeTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __STORETIMESTAMP_ISSET_ID);
  }

  public void setStoreTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STORETIMESTAMP_ISSET_ID, value);
  }

  public String getStoreHost() {
    return this.storeHost;
  }

  public MessageExt setStoreHost(String storeHost) {
    this.storeHost = storeHost;
    return this;
  }

  public void unsetStoreHost() {
    this.storeHost = null;
  }

  /** Returns true if field storeHost is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreHost() {
    return this.storeHost != null;
  }

  public void setStoreHostIsSet(boolean value) {
    if (!value) {
      this.storeHost = null;
    }
  }

  public String getMsgId() {
    return this.msgId;
  }

  public MessageExt setMsgId(String msgId) {
    this.msgId = msgId;
    return this;
  }

  public void unsetMsgId() {
    this.msgId = null;
  }

  /** Returns true if field msgId is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgId() {
    return this.msgId != null;
  }

  public void setMsgIdIsSet(boolean value) {
    if (!value) {
      this.msgId = null;
    }
  }

  public long getCommitLogOffset() {
    return this.commitLogOffset;
  }

  public MessageExt setCommitLogOffset(long commitLogOffset) {
    this.commitLogOffset = commitLogOffset;
    setCommitLogOffsetIsSet(true);
    return this;
  }

  public void unsetCommitLogOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMITLOGOFFSET_ISSET_ID);
  }

  /** Returns true if field commitLogOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitLogOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMITLOGOFFSET_ISSET_ID);
  }

  public void setCommitLogOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMITLOGOFFSET_ISSET_ID, value);
  }

  public long getBodyCRC() {
    return this.bodyCRC;
  }

  public MessageExt setBodyCRC(long bodyCRC) {
    this.bodyCRC = bodyCRC;
    setBodyCRCIsSet(true);
    return this;
  }

  public void unsetBodyCRC() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BODYCRC_ISSET_ID);
  }

  /** Returns true if field bodyCRC is set (has been assigned a value) and false otherwise */
  public boolean isSetBodyCRC() {
    return EncodingUtils.testBit(__isset_bitfield, __BODYCRC_ISSET_ID);
  }

  public void setBodyCRCIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BODYCRC_ISSET_ID, value);
  }

  public int getReconsumeTimes() {
    return this.reconsumeTimes;
  }

  public MessageExt setReconsumeTimes(int reconsumeTimes) {
    this.reconsumeTimes = reconsumeTimes;
    setReconsumeTimesIsSet(true);
    return this;
  }

  public void unsetReconsumeTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONSUMETIMES_ISSET_ID);
  }

  /** Returns true if field reconsumeTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetReconsumeTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONSUMETIMES_ISSET_ID);
  }

  public void setReconsumeTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONSUMETIMES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOPIC:
      if (value == null) {
        unsetTopic();
      } else {
        setTopic((String)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Integer)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((Map<String,String>)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((ByteBuffer)value);
      }
      break;

    case QUEUE_ID:
      if (value == null) {
        unsetQueueId();
      } else {
        setQueueId((Integer)value);
      }
      break;

    case STORE_SIZE:
      if (value == null) {
        unsetStoreSize();
      } else {
        setStoreSize((Integer)value);
      }
      break;

    case QUEUE_OFFSET:
      if (value == null) {
        unsetQueueOffset();
      } else {
        setQueueOffset((Long)value);
      }
      break;

    case SYS_FLAG:
      if (value == null) {
        unsetSysFlag();
      } else {
        setSysFlag((Integer)value);
      }
      break;

    case BORN_TIMESTAMP:
      if (value == null) {
        unsetBornTimestamp();
      } else {
        setBornTimestamp((Long)value);
      }
      break;

    case BORN_HOST:
      if (value == null) {
        unsetBornHost();
      } else {
        setBornHost((String)value);
      }
      break;

    case STORE_TIMESTAMP:
      if (value == null) {
        unsetStoreTimestamp();
      } else {
        setStoreTimestamp((Long)value);
      }
      break;

    case STORE_HOST:
      if (value == null) {
        unsetStoreHost();
      } else {
        setStoreHost((String)value);
      }
      break;

    case MSG_ID:
      if (value == null) {
        unsetMsgId();
      } else {
        setMsgId((String)value);
      }
      break;

    case COMMIT_LOG_OFFSET:
      if (value == null) {
        unsetCommitLogOffset();
      } else {
        setCommitLogOffset((Long)value);
      }
      break;

    case BODY_CRC:
      if (value == null) {
        unsetBodyCRC();
      } else {
        setBodyCRC((Long)value);
      }
      break;

    case RECONSUME_TIMES:
      if (value == null) {
        unsetReconsumeTimes();
      } else {
        setReconsumeTimes((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOPIC:
      return getTopic();

    case FLAG:
      return Integer.valueOf(getFlag());

    case PROPERTIES:
      return getProperties();

    case DATA:
      return getData();

    case QUEUE_ID:
      return Integer.valueOf(getQueueId());

    case STORE_SIZE:
      return Integer.valueOf(getStoreSize());

    case QUEUE_OFFSET:
      return Long.valueOf(getQueueOffset());

    case SYS_FLAG:
      return Integer.valueOf(getSysFlag());

    case BORN_TIMESTAMP:
      return Long.valueOf(getBornTimestamp());

    case BORN_HOST:
      return getBornHost();

    case STORE_TIMESTAMP:
      return Long.valueOf(getStoreTimestamp());

    case STORE_HOST:
      return getStoreHost();

    case MSG_ID:
      return getMsgId();

    case COMMIT_LOG_OFFSET:
      return Long.valueOf(getCommitLogOffset());

    case BODY_CRC:
      return Long.valueOf(getBodyCRC());

    case RECONSUME_TIMES:
      return Integer.valueOf(getReconsumeTimes());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOPIC:
      return isSetTopic();
    case FLAG:
      return isSetFlag();
    case PROPERTIES:
      return isSetProperties();
    case DATA:
      return isSetData();
    case QUEUE_ID:
      return isSetQueueId();
    case STORE_SIZE:
      return isSetStoreSize();
    case QUEUE_OFFSET:
      return isSetQueueOffset();
    case SYS_FLAG:
      return isSetSysFlag();
    case BORN_TIMESTAMP:
      return isSetBornTimestamp();
    case BORN_HOST:
      return isSetBornHost();
    case STORE_TIMESTAMP:
      return isSetStoreTimestamp();
    case STORE_HOST:
      return isSetStoreHost();
    case MSG_ID:
      return isSetMsgId();
    case COMMIT_LOG_OFFSET:
      return isSetCommitLogOffset();
    case BODY_CRC:
      return isSetBodyCRC();
    case RECONSUME_TIMES:
      return isSetReconsumeTimes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageExt)
      return this.equals((MessageExt)that);
    return false;
  }

  public boolean equals(MessageExt that) {
    if (that == null)
      return false;

    boolean this_present_topic = true && this.isSetTopic();
    boolean that_present_topic = true && that.isSetTopic();
    if (this_present_topic || that_present_topic) {
      if (!(this_present_topic && that_present_topic))
        return false;
      if (!this.topic.equals(that.topic))
        return false;
    }

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_queueId = true;
    boolean that_present_queueId = true;
    if (this_present_queueId || that_present_queueId) {
      if (!(this_present_queueId && that_present_queueId))
        return false;
      if (this.queueId != that.queueId)
        return false;
    }

    boolean this_present_storeSize = true;
    boolean that_present_storeSize = true;
    if (this_present_storeSize || that_present_storeSize) {
      if (!(this_present_storeSize && that_present_storeSize))
        return false;
      if (this.storeSize != that.storeSize)
        return false;
    }

    boolean this_present_queueOffset = true;
    boolean that_present_queueOffset = true;
    if (this_present_queueOffset || that_present_queueOffset) {
      if (!(this_present_queueOffset && that_present_queueOffset))
        return false;
      if (this.queueOffset != that.queueOffset)
        return false;
    }

    boolean this_present_sysFlag = true;
    boolean that_present_sysFlag = true;
    if (this_present_sysFlag || that_present_sysFlag) {
      if (!(this_present_sysFlag && that_present_sysFlag))
        return false;
      if (this.sysFlag != that.sysFlag)
        return false;
    }

    boolean this_present_bornTimestamp = true;
    boolean that_present_bornTimestamp = true;
    if (this_present_bornTimestamp || that_present_bornTimestamp) {
      if (!(this_present_bornTimestamp && that_present_bornTimestamp))
        return false;
      if (this.bornTimestamp != that.bornTimestamp)
        return false;
    }

    boolean this_present_bornHost = true && this.isSetBornHost();
    boolean that_present_bornHost = true && that.isSetBornHost();
    if (this_present_bornHost || that_present_bornHost) {
      if (!(this_present_bornHost && that_present_bornHost))
        return false;
      if (!this.bornHost.equals(that.bornHost))
        return false;
    }

    boolean this_present_storeTimestamp = true;
    boolean that_present_storeTimestamp = true;
    if (this_present_storeTimestamp || that_present_storeTimestamp) {
      if (!(this_present_storeTimestamp && that_present_storeTimestamp))
        return false;
      if (this.storeTimestamp != that.storeTimestamp)
        return false;
    }

    boolean this_present_storeHost = true && this.isSetStoreHost();
    boolean that_present_storeHost = true && that.isSetStoreHost();
    if (this_present_storeHost || that_present_storeHost) {
      if (!(this_present_storeHost && that_present_storeHost))
        return false;
      if (!this.storeHost.equals(that.storeHost))
        return false;
    }

    boolean this_present_msgId = true && this.isSetMsgId();
    boolean that_present_msgId = true && that.isSetMsgId();
    if (this_present_msgId || that_present_msgId) {
      if (!(this_present_msgId && that_present_msgId))
        return false;
      if (!this.msgId.equals(that.msgId))
        return false;
    }

    boolean this_present_commitLogOffset = true;
    boolean that_present_commitLogOffset = true;
    if (this_present_commitLogOffset || that_present_commitLogOffset) {
      if (!(this_present_commitLogOffset && that_present_commitLogOffset))
        return false;
      if (this.commitLogOffset != that.commitLogOffset)
        return false;
    }

    boolean this_present_bodyCRC = true;
    boolean that_present_bodyCRC = true;
    if (this_present_bodyCRC || that_present_bodyCRC) {
      if (!(this_present_bodyCRC && that_present_bodyCRC))
        return false;
      if (this.bodyCRC != that.bodyCRC)
        return false;
    }

    boolean this_present_reconsumeTimes = true;
    boolean that_present_reconsumeTimes = true;
    if (this_present_reconsumeTimes || that_present_reconsumeTimes) {
      if (!(this_present_reconsumeTimes && that_present_reconsumeTimes))
        return false;
      if (this.reconsumeTimes != that.reconsumeTimes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_topic = true && (isSetTopic());
    list.add(present_topic);
    if (present_topic)
      list.add(topic);

    boolean present_flag = true;
    list.add(present_flag);
    if (present_flag)
      list.add(flag);

    boolean present_properties = true && (isSetProperties());
    list.add(present_properties);
    if (present_properties)
      list.add(properties);

    boolean present_data = true && (isSetData());
    list.add(present_data);
    if (present_data)
      list.add(data);

    boolean present_queueId = true;
    list.add(present_queueId);
    if (present_queueId)
      list.add(queueId);

    boolean present_storeSize = true;
    list.add(present_storeSize);
    if (present_storeSize)
      list.add(storeSize);

    boolean present_queueOffset = true;
    list.add(present_queueOffset);
    if (present_queueOffset)
      list.add(queueOffset);

    boolean present_sysFlag = true;
    list.add(present_sysFlag);
    if (present_sysFlag)
      list.add(sysFlag);

    boolean present_bornTimestamp = true;
    list.add(present_bornTimestamp);
    if (present_bornTimestamp)
      list.add(bornTimestamp);

    boolean present_bornHost = true && (isSetBornHost());
    list.add(present_bornHost);
    if (present_bornHost)
      list.add(bornHost);

    boolean present_storeTimestamp = true;
    list.add(present_storeTimestamp);
    if (present_storeTimestamp)
      list.add(storeTimestamp);

    boolean present_storeHost = true && (isSetStoreHost());
    list.add(present_storeHost);
    if (present_storeHost)
      list.add(storeHost);

    boolean present_msgId = true && (isSetMsgId());
    list.add(present_msgId);
    if (present_msgId)
      list.add(msgId);

    boolean present_commitLogOffset = true;
    list.add(present_commitLogOffset);
    if (present_commitLogOffset)
      list.add(commitLogOffset);

    boolean present_bodyCRC = true;
    list.add(present_bodyCRC);
    if (present_bodyCRC)
      list.add(bodyCRC);

    boolean present_reconsumeTimes = true;
    list.add(present_reconsumeTimes);
    if (present_reconsumeTimes)
      list.add(reconsumeTimes);

    return list.hashCode();
  }

  @Override
  public int compareTo(MessageExt other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueId()).compareTo(other.isSetQueueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueId, other.queueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoreSize()).compareTo(other.isSetStoreSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeSize, other.storeSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueOffset()).compareTo(other.isSetQueueOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueOffset, other.queueOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSysFlag()).compareTo(other.isSetSysFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysFlag, other.sysFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBornTimestamp()).compareTo(other.isSetBornTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBornTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bornTimestamp, other.bornTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBornHost()).compareTo(other.isSetBornHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBornHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bornHost, other.bornHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoreTimestamp()).compareTo(other.isSetStoreTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeTimestamp, other.storeTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoreHost()).compareTo(other.isSetStoreHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeHost, other.storeHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgId()).compareTo(other.isSetMsgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgId, other.msgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommitLogOffset()).compareTo(other.isSetCommitLogOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitLogOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitLogOffset, other.commitLogOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBodyCRC()).compareTo(other.isSetBodyCRC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBodyCRC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bodyCRC, other.bodyCRC);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconsumeTimes()).compareTo(other.isSetReconsumeTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconsumeTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconsumeTimes, other.reconsumeTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MessageExt(");
    boolean first = true;

    sb.append("topic:");
    if (this.topic == null) {
      sb.append("null");
    } else {
      sb.append(this.topic);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("properties:");
    if (this.properties == null) {
      sb.append("null");
    } else {
      sb.append(this.properties);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.data, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueId:");
    sb.append(this.queueId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("storeSize:");
    sb.append(this.storeSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueOffset:");
    sb.append(this.queueOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sysFlag:");
    sb.append(this.sysFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bornTimestamp:");
    sb.append(this.bornTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bornHost:");
    if (this.bornHost == null) {
      sb.append("null");
    } else {
      sb.append(this.bornHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("storeTimestamp:");
    sb.append(this.storeTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("storeHost:");
    if (this.storeHost == null) {
      sb.append("null");
    } else {
      sb.append(this.storeHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgId:");
    if (this.msgId == null) {
      sb.append("null");
    } else {
      sb.append(this.msgId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commitLogOffset:");
    sb.append(this.commitLogOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bodyCRC:");
    sb.append(this.bodyCRC);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconsumeTimes:");
    sb.append(this.reconsumeTimes);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageExtStandardSchemeFactory implements SchemeFactory {
    public MessageExtStandardScheme getScheme() {
      return new MessageExtStandardScheme();
    }
  }

  private static class MessageExtStandardScheme extends StandardScheme<MessageExt> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageExt struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOPIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic = iprot.readString();
              struct.setTopicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flag = iprot.readI32();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.properties = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.properties.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readBinary();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUEUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queueId = iprot.readI32();
              struct.setQueueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STORE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.storeSize = iprot.readI32();
              struct.setStoreSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUEUE_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queueOffset = iprot.readI64();
              struct.setQueueOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SYS_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sysFlag = iprot.readI32();
              struct.setSysFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BORN_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bornTimestamp = iprot.readI64();
              struct.setBornTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BORN_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bornHost = iprot.readString();
              struct.setBornHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STORE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.storeTimestamp = iprot.readI64();
              struct.setStoreTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STORE_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storeHost = iprot.readString();
              struct.setStoreHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msgId = iprot.readString();
              struct.setMsgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COMMIT_LOG_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commitLogOffset = iprot.readI64();
              struct.setCommitLogOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BODY_CRC
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bodyCRC = iprot.readI64();
              struct.setBodyCRCIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RECONSUME_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reconsumeTimes = iprot.readI32();
              struct.setReconsumeTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageExt struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.topic != null) {
        oprot.writeFieldBegin(TOPIC_FIELD_DESC);
        oprot.writeString(struct.topic);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeI32(struct.flag);
      oprot.writeFieldEnd();
      if (struct.properties != null) {
        oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
          for (Map.Entry<String, String> _iter4 : struct.properties.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeBinary(struct.data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUEUE_ID_FIELD_DESC);
      oprot.writeI32(struct.queueId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STORE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.storeSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUEUE_OFFSET_FIELD_DESC);
      oprot.writeI64(struct.queueOffset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SYS_FLAG_FIELD_DESC);
      oprot.writeI32(struct.sysFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BORN_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.bornTimestamp);
      oprot.writeFieldEnd();
      if (struct.bornHost != null) {
        oprot.writeFieldBegin(BORN_HOST_FIELD_DESC);
        oprot.writeString(struct.bornHost);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STORE_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.storeTimestamp);
      oprot.writeFieldEnd();
      if (struct.storeHost != null) {
        oprot.writeFieldBegin(STORE_HOST_FIELD_DESC);
        oprot.writeString(struct.storeHost);
        oprot.writeFieldEnd();
      }
      if (struct.msgId != null) {
        oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
        oprot.writeString(struct.msgId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMMIT_LOG_OFFSET_FIELD_DESC);
      oprot.writeI64(struct.commitLogOffset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BODY_CRC_FIELD_DESC);
      oprot.writeI64(struct.bodyCRC);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECONSUME_TIMES_FIELD_DESC);
      oprot.writeI32(struct.reconsumeTimes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageExtTupleSchemeFactory implements SchemeFactory {
    public MessageExtTupleScheme getScheme() {
      return new MessageExtTupleScheme();
    }
  }

  private static class MessageExtTupleScheme extends TupleScheme<MessageExt> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageExt struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTopic()) {
        optionals.set(0);
      }
      if (struct.isSetFlag()) {
        optionals.set(1);
      }
      if (struct.isSetProperties()) {
        optionals.set(2);
      }
      if (struct.isSetData()) {
        optionals.set(3);
      }
      if (struct.isSetQueueId()) {
        optionals.set(4);
      }
      if (struct.isSetStoreSize()) {
        optionals.set(5);
      }
      if (struct.isSetQueueOffset()) {
        optionals.set(6);
      }
      if (struct.isSetSysFlag()) {
        optionals.set(7);
      }
      if (struct.isSetBornTimestamp()) {
        optionals.set(8);
      }
      if (struct.isSetBornHost()) {
        optionals.set(9);
      }
      if (struct.isSetStoreTimestamp()) {
        optionals.set(10);
      }
      if (struct.isSetStoreHost()) {
        optionals.set(11);
      }
      if (struct.isSetMsgId()) {
        optionals.set(12);
      }
      if (struct.isSetCommitLogOffset()) {
        optionals.set(13);
      }
      if (struct.isSetBodyCRC()) {
        optionals.set(14);
      }
      if (struct.isSetReconsumeTimes()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetTopic()) {
        oprot.writeString(struct.topic);
      }
      if (struct.isSetFlag()) {
        oprot.writeI32(struct.flag);
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (Map.Entry<String, String> _iter5 : struct.properties.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
      if (struct.isSetData()) {
        oprot.writeBinary(struct.data);
      }
      if (struct.isSetQueueId()) {
        oprot.writeI32(struct.queueId);
      }
      if (struct.isSetStoreSize()) {
        oprot.writeI32(struct.storeSize);
      }
      if (struct.isSetQueueOffset()) {
        oprot.writeI64(struct.queueOffset);
      }
      if (struct.isSetSysFlag()) {
        oprot.writeI32(struct.sysFlag);
      }
      if (struct.isSetBornTimestamp()) {
        oprot.writeI64(struct.bornTimestamp);
      }
      if (struct.isSetBornHost()) {
        oprot.writeString(struct.bornHost);
      }
      if (struct.isSetStoreTimestamp()) {
        oprot.writeI64(struct.storeTimestamp);
      }
      if (struct.isSetStoreHost()) {
        oprot.writeString(struct.storeHost);
      }
      if (struct.isSetMsgId()) {
        oprot.writeString(struct.msgId);
      }
      if (struct.isSetCommitLogOffset()) {
        oprot.writeI64(struct.commitLogOffset);
      }
      if (struct.isSetBodyCRC()) {
        oprot.writeI64(struct.bodyCRC);
      }
      if (struct.isSetReconsumeTimes()) {
        oprot.writeI32(struct.reconsumeTimes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageExt struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.topic = iprot.readString();
        struct.setTopicIsSet(true);
      }
      if (incoming.get(1)) {
        struct.flag = iprot.readI32();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.properties = new HashMap<String,String>(2*_map6.size);
          String _key7;
          String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.properties.put(_key7, _val8);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.data = iprot.readBinary();
        struct.setDataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.queueId = iprot.readI32();
        struct.setQueueIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.storeSize = iprot.readI32();
        struct.setStoreSizeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.queueOffset = iprot.readI64();
        struct.setQueueOffsetIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sysFlag = iprot.readI32();
        struct.setSysFlagIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bornTimestamp = iprot.readI64();
        struct.setBornTimestampIsSet(true);
      }
      if (incoming.get(9)) {
        struct.bornHost = iprot.readString();
        struct.setBornHostIsSet(true);
      }
      if (incoming.get(10)) {
        struct.storeTimestamp = iprot.readI64();
        struct.setStoreTimestampIsSet(true);
      }
      if (incoming.get(11)) {
        struct.storeHost = iprot.readString();
        struct.setStoreHostIsSet(true);
      }
      if (incoming.get(12)) {
        struct.msgId = iprot.readString();
        struct.setMsgIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.commitLogOffset = iprot.readI64();
        struct.setCommitLogOffsetIsSet(true);
      }
      if (incoming.get(14)) {
        struct.bodyCRC = iprot.readI64();
        struct.setBodyCRCIsSet(true);
      }
      if (incoming.get(15)) {
        struct.reconsumeTimes = iprot.readI32();
        struct.setReconsumeTimesIsSet(true);
      }
    }
  }

}

